<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ManageWalla"
                    xmlns:ShaderEffectLibrary="clr-namespace:ShaderEffectLibrary;assembly=ShaderEffectLibrary">

    <local:UploadImageFileList x:Key="uploadImagefileListKey" />
    <local:UploadUIState x:Key="uploadUIStateKey"  />
    <local:UploadStatusListBind x:Key="uploadStatusListBindKey"  />
    <local:ImageMainViewerList x:Key="imageMainViewerListKey" />
    <local:GalleryCategoryModel x:Key="galleryCategoryModelKey" />
    <!--<local:DemoViewModel x:Key="ViewModel"/>-->
    
    <local:WallaUploadStatusConverter x:Key="wallaUploadStatusConverterKey"  />
    
    <XmlNamespaceMappingCollection x:Key="wallaNamespaceMappingKey">
        <XmlNamespaceMapping Uri="http://www.example.org/UploadStatusList" Prefix="s" />
    </XmlNamespaceMappingCollection>

    <XmlDataProvider x:Key="uploadStatusListXmlKey"  XmlNamespaceManager="{StaticResource wallaNamespaceMappingKey}" />
    
    <ControlTemplate x:Key="templateButton" TargetType="{x:Type Button}">
        <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
            <Rectangle x:Name="outerRectangle" StrokeThickness="1">
                
                <Rectangle.Stroke>
                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent},Path=BorderBrush.Color}" />
                </Rectangle.Stroke>
                
                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Background.Color}" />
                </Rectangle.Fill>
                
            </Rectangle>

            <ContentPresenter Margin="{TemplateBinding Padding}" />
     
        </Grid>
        <ControlTemplate.Triggers>
            
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="outerRectangle" Property="StrokeThickness" Value="1.5" />
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="outerRectangle" Property="StrokeThickness" Value="1.5" />
                <Setter TargetName="outerRectangle" Property="RenderTransformOrigin" Value="0.5,0.5" />
                <Setter TargetName="outerRectangle" Property="RenderTransform">
                    <Setter.Value>
                        <ScaleTransform ScaleX=".96" ScaleY=".98" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="templateToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Rectangle x:Name="outerRectangle" StrokeThickness="0">
                
                <Rectangle.Stroke>
                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent},Path=BorderBrush.Color}" />
                </Rectangle.Stroke>

                <Rectangle.Fill>
                        <SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background.Color}" />       
                </Rectangle.Fill>
            </Rectangle>

            <ContentPresenter Margin="{TemplateBinding Margin}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="outerRectangle" Property="StrokeThickness" Value="1" />
            </Trigger>
            
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="outerRectangle" Property="StrokeThickness" Value="1.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
   
    <ControlTemplate x:Key="templateRadioButton" TargetType="{x:Type RadioButton}">
        <Grid VerticalAlignment="Center" HorizontalAlignment="Center">
            <Rectangle x:Name="outerRectangle" StrokeThickness="0.5">

                <Rectangle.Stroke>
                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent},Path=BorderBrush.Color}" />
                </Rectangle.Stroke>

                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Background.Color}" />
                </Rectangle.Fill>

            </Rectangle>

            <ContentPresenter Margin="{TemplateBinding Margin}" />

        </Grid>
        <ControlTemplate.Triggers>
            
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="outerRectangle" Property="Stroke">
                    <Setter.Value>
                        <SolidColorBrush Color="Black" />
                    </Setter.Value>
                </Setter>
            </Trigger>

            <!--
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="IsChecked" Value="True" />
            </Trigger>
            -->
            
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <ControlTemplate x:Key="templateRadioButtonTest" TargetType="{x:Type RadioButton}">
        <Grid>
            <Rectangle x:Name="outerRectangle" StrokeThickness="0">
                <Rectangle.Stroke>
                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent},Path=BorderBrush.Color}" />
                </Rectangle.Stroke>

                <Rectangle.Fill>
                    <SolidColorBrush Color="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background.Color}" />
                </Rectangle.Fill>
            </Rectangle>
            <ContentPresenter Margin="{TemplateBinding Margin}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="outerRectangle" Property="StrokeThickness" Value="1" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="outerRectangle" Property="StrokeThickness" Value="1.5" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Imported multiselect treeview stuff.-->

    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF1BBBFA"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="Transparent"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF262626"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF595959"/>
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="Transparent"/>
    <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF989898"/>
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                        <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MultiSelectTreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton 
                                x:Name="Expander" 
                                ClickMode="Press" 
                                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" 
                                Style="{StaticResource ExpandCollapseToggleStyle}"/>
                        <Border 
                                x:Name="Bd" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" 
                                Grid.Column="1" 
                                Padding="{TemplateBinding Padding}" 
                                SnapsToDevicePixels="true">
                            <ContentPresenter 
                                    x:Name="PART_Header" 
                                    ContentSource="Header" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter 
                                x:Name="ItemsHost" 
                                Grid.ColumnSpan="2" 
                                Grid.Column="1" 
                                Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <!--Trigger Property="IsSelected" Value="true"-->
                        <Trigger Property="local:MultiSelectTreeView.IsItemSelected" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <!--Condition Property="IsSelected" Value="true"/-->
                                <Condition Property="local:MultiSelectTreeView.IsItemSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>


</ResourceDictionary>